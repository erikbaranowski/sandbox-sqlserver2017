#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jun 18 23:37:04 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set timeout -1
spawn /opt/mssql/bin/mssql-conf setup
match_max 100000
expect -exact "usermod: no changes\r
Choose an edition of SQL Server:\r
  1) Evaluation (free, no production use rights, 180-day limit)\r
  2) Developer (free, no production use rights)\r
  3) Express (free)\r
  4) Web (PAID)\r
  5) Standard (PAID)\r
  6) Enterprise (PAID) - CPU Core utilization restricted to 20 physical/40 hyperthreaded\r
  7) Enterprise Core (PAID) - CPU Core utilization up to Operating System Maximum\r
  8) I bought a license through a retail sales channel and have a product key to enter.\r
\r
Details about editions can be found at\r
https://go.microsoft.com/fwlink/?LinkId=852748&clcid=0x409\r
\r
Use of PAID editions of this software requires separate licensing through a\r
Microsoft Volume Licensing program.\r
By choosing a PAID edition, you are verifying that you have the appropriate\r
number of licenses in place to install and run this software.\r
\r
Enter your edition(1-8): "
send -- "3\r"
expect -exact "3\r
The license terms for this product can be found in\r
/usr/share/doc/mssql-server or downloaded from:\r
https://go.microsoft.com/fwlink/?LinkId=855862&clcid=0x409\r
\r
The privacy statement can be viewed at:\r
https://go.microsoft.com/fwlink/?LinkId=853010&clcid=0x409\r
\r
Do you accept the license terms? \[Yes/No\]:"
send -- "Yes\r"
expect -exact "Yes\r
\r
Enter the SQL Server system administrator password: "
send -- "Password1\r"
expect -exact "\r
Confirm the SQL Server system administrator password: "
send -- "Password1\r"
expect eof
